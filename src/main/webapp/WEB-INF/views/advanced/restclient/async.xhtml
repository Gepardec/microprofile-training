<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:tag="http://tags.microprofile.training.gepardec.com">

    <ui:define name="title">
        example 1
    </ui:define>

    <ui:define name="body">
        <section>
            <div class="container-lg">
                <div class="row m-2">
                    <div class="col">
                        <p>
                            The specification for Microprofile
                            <a href="#{mpUri.restClientUri}#config"
                               target="_blank">
                                RestClient.
                            </a>
                        </p>

                        <p>
                            An API is called three times and the responses are combined.
                        </p>

                        <hr class="my-3"/>
                    </div>
                </div>

                <div class="row m-2">
                    <div class="col">
                        <h4>
                            Your Task:
                        </h4>

                        <p>
                            First change the <code>getAsync()</code> method in the
                            <code>src/main/java/com/gepardec/training/microprofile/advanced/restclient/RestClientAPIAdvanced.java</code>
                            interface to work asynchronous. The async call should take not longer then two seconds.
                        </p>

                        <div class="text-center">
                            <tag:button id="getSync" path="/advanced/restclient/async/getSync"
                                        text="three get Requests"/>
                        </div>
                        <hr class="my-3"/>
                        <div class="text-center">
                            <tag:button id="getAsync" path="/advanced/restclient/async/getAsync"
                                        text="three get Requests async"/>
                        </div>
                    </div>
                </div>

                <div class="row my-2">
                    <div class="col">
                        <hr class="my-3"/>
                    </div>
                    <div class="row my-2">
                        <div class="col">
                            <div class="row text-start font-weight-bold">
                                <div class="col">
                                    Server Response:
                                </div>
                                <div class="col">
                                    <span id="serverResponse"/>
                                </div>
                            </div>

                            <hr class="my-3"/>
                        </div>
                    </div>
                </div>

                <div class="row m-2">
                    <div class="col">
                        <h4>
                            Your second Task:
                        </h4>

                        <p>
                            Add a ClientRequestFilter Provider which logs the value of <code>threadLocalValue</code>
                            in the <code>AsyncController</code> class and try to understand the outcome.
                        </p>

                        <p>
                            To solve this problem we can use the AsyncInvocationInterceptor.
                            This is a provider type that allows users to propagate ThreadLocal objects
                            - or anything that is associated with the calling thread.
                            This interface contains three methods. The first one is invoked on the calling thread prior to "swapping" threads.
                            The other two invoked on the async thread.
                        </p>

                        <h4>
                            Your third Task:
                        </h4>

                        <p>
                            To implement the provider you need an <code>AsyncInvocationInterceptorFactory</code>.
                            Create a Factory which implements AsyncInvocationInterceptorFactory and return in the
                            <code>newInterceptor</code> method an interceptor which implements <code>AsyncInvocationInterceptor</code>.

                        </p>

                    </div>
                </div>
            </div>
        </section>
    </ui:define>
    <ui:define name="bottom">
        <tag:timerDialog id="timer" title="Waiting for response..."/>

        <script type="module">
            import mp from '#{pathHelper.buildResourcePath("/js/mp.js")}'
            import timeout from '#{pathHelper.buildResourcePath("/js/basic/faulttolerance/timeout.js")}'

            mp.registerOnLoad(() => {
                timeout.init({
                    callElement: document.getElementById("getAsync"),
                    responseElement: document.getElementById("serverResponse"),
                    timerElement: document.getElementById('timer'),
                });
                timeout.init({
                    callElement: document.getElementById("getSync"),
                    responseElement: document.getElementById("serverResponse"),
                    timerElement: document.getElementById('timer'),
                });
            });
        </script>
    </ui:define>
</ui:composition>



