<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:tag="http://tags.microprofile.training.gepardec.com">

    <ui:param name="verticallyCentered" value="false" />

    <ui:define name="title">
        MicroProfile-Rest-Client Advanced Async
    </ui:define>

    <ui:define name="body">
        <section>
            <div class="container-lg">
                <div class="row my-2">
                    <div class="col">
                        <div class="text-center">
                            <h1>Asynchronous</h1>
                        </div>
                    </div>
                </div>

                <div class="row m-2">
                    <div class="col">
                        <p>
                            The specification for MicroProfile
                            <a href="#{mpUri.restClientUri}#config"
                                target="_blank">
                                RestClient.
                            </a>
                        </p>

                        <p>
                            An API is called three times and the responses are combined.
                        </p>

                        <hr class="my-3" />
                    </div>
                </div>

                <div class="row m-2">
                    <div class="col">
                        <h4>
                            Your Task:
                        </h4>

                        <p>
                            First change the <code>getAsync()</code> method in the
                            <code>src/main/java/com/gepardec/training/microprofile/advanced/restclient/RestClientAPIAdvanced.java</code>
                            interface to work asynchronous.Also check the <code>AsyncController </code>there is a TODO
                            The async call should take not longer then two seconds.
                        </p>

                        <div class="text-center">
                            <tag:button id="getSync" path="/advanced/restclient/async/getSync"
                                text="three get Requests" />
                        </div>
                        <hr class="my-3" />
                        <div class="text-center">
                            <tag:button id="getAsync" path="/advanced/restclient/async/getAsync"
                                text="three get Requests async" />
                        </div>
                    </div>
                </div>

                <div class="row my-2">
                    <hr class="my-3" />

                    <div class="col">
                        <div class="row">
                            <div class="col">
                                Server Response:
                            </div>
                            <div class="col">
                                <pre><span id="serverResponse" /></pre>
                            </div>
                        </div>

                        <hr class="my-3" />
                    </div>
                </div>

                <div class="row m-2">
                    <div class="col">
                        <h4>
                            Your second Task:
                        </h4>

                        <p>
                            Our goal is to create a new header with the value <code>threadLocalValue</code> from the <code>AsyncController</code>.
                            Therefore try the following.

                            Add a ClientRequestFilter Provider which logs the value of <code>threadLocalValue</code>
                            in the <code>AsyncController</code> and adds a new header to the outgoing request.
                            Try it out, and look at the log and value of the new header.
                            If you understand the dilemma continue.
                        </p>

                        <p>
                            To solve this problem we can use the AsyncInvocationInterceptor.
                            This is a provider type that allows users to propagate ThreadLocal objects
                            - or anything that is associated with the calling thread.
                            This interface contains three methods. The first one is invoked on the calling thread prior to "swapping" threads.
                            The other two invoked on the async thread.
                        </p>

                        <h4>
                            Your third Task:
                        </h4>

                        <p>
                            To implement the provider you need an <code>AsyncInvocationInterceptorFactory</code> and an <code>AsyncInvocationInterceptor</code>
                            Create a Factory which implements AsyncInvocationInterceptorFactory and return in the
                            <code>newInterceptor</code> method an interceptor which implements <code>AsyncInvocationInterceptor</code>.
                            Now you can use the Interceptor method <code>prepareContext()</code> to get the value of AsyncController.
                            In the <code>applyContext()</code> you can set the value.
                            If everthing is done correctly you can check once again the asyncRequests and see the values of the new header is set.

                        </p>

                        <hr class="my-3" />
                    </div>
                </div>
            </div>
        </section>
    </ui:define>

    <ui:define name="bottom">
        <tag:timerDialog id="timer" title="Waiting for response..." />

        <script type="module">
            import mp from '#{pathHelper.buildResourcePath("/js/mp.js")}'
            import timeout from '#{pathHelper.buildResourcePath("/js/basic/faulttolerance/timeout.js")}'

            mp.registerOnLoad(() => {
                timeout.init({
                    callElement: document.getElementById("getAsync"),
                    responseElement: document.getElementById("serverResponse"),
                    timerElement: document.getElementById('timer'),
                });
                timeout.init({
                    callElement: document.getElementById("getSync"),
                    responseElement: document.getElementById("serverResponse"),
                    timerElement: document.getElementById('timer'),
                });
            });
        </script>
    </ui:define>
</ui:composition>



