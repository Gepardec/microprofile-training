<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:tag="http://tags.microprofile.training.gepardec.com">

    <ui:define name="title">
        Microprofile Basics
    </ui:define>

    <ui:define name="body">
        <section>
            <tag:card id="mp-config" title="Microprofile Config">
                <ui:define name="body">
                    <p>
                        Microprofile Config facilitates the configuration of an application. With the following
                        examples, you will configure this application in several ways and see how you can use the
                        configured values. In two examples, these configured values will be mapped and converted into
                        specific target types or even aggregated into a property class. Furthermore, you will handle
                        empty configurations which, by default, lead to exceptions.
                    </p>
                    The specification for Microprofile
                    <a href="#{mpUri.configUri}#config"
                        target="_blank">
                        Config.
                    </a>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toConfigExamples" text="Examples" path="/basic/config/index" />
                </ui:define>
            </tag:card>

            <tag:card id="mp-metrics" title="Microprofile Metrics">
                <ui:define name="body">
                    <p>
                        MicroProfile Metrics gives you the ability to not only monitor pre-defined metrics.
                        In the following, through a few examples, we will familiarise ourselves with the basic
                        metrics, for example Metered, Counted or Timed.
                    </p>
                    The specification for Microprofile
                    <a href="https://download.eclipse.org/microprofile/microprofile-metrics-3.0/microprofile-metrics-spec-3.0.html#metrics"
                       target="_blank">
                        Metrics.
                    </a>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toMetricsExamples" text="Examples" path="/basic/metrics/index" />
                </ui:define>
            </tag:card>
        </section>
        <section>
            <tag:card id="mp-openapi" title="Microprofile OpenAPI">
                <ui:define name="body">
                    <p>
                        With Microprofile OpenAPI you will generate OpenAPI v3 documents which are representing rest services.
                        From these you will generate again Java Ressources. To make this process more comfortable you will learn
                        about OAS3 annotations, OASModelReaders and OASFilters.
                    </p>
                    The specification for Microprofile
                    <a href="#{mpUri.openApiUri}"
                       target="_blank">
                        OpenAPI.
                    </a>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toOpenAPIExamples" text="Examples" path="/basic/openapi/index"/>
                </ui:define>
            </tag:card>
        </section>
        <section>
            <tag:card id="mp-restClient" title="Microprofile RestClient">
                <ui:define name="body">
                    <p>
                        <cite>
                            The MicroProfile Rest Client provides a type-safe approach to invoke RESTful services over HTTP. As much as possible the MP Rest Client attempts to use Jakarta RESTful Web Services 2.1 APIs for consistency and easier re-use.
                        </cite>
                    </p>
                    <p>
                        from the
                        <a href="https://github.com/eclipse/microprofile-rest-client#_Rationale"
                           target="_blank">
                            microprofile-rest-client
                        </a>
                         github
                    </p>
                    The specification for Microprofile
                    <a href="#{mpUri.restClientUri}"
                       target="_blank">
                        Rest Client.
                    </a>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toRestClientExamples" text="Examples" path="/basic/restclient/index"/>
                </ui:define>
            </tag:card>
        </section>
        <section>
            <tag:card id="mp-faulttolerance" title="Microprofile Fault Tolerance">
                <ui:define name="body">
                    <p>
                        The Microprofile Fault Tolerance specification emerged from the Netflix-Hystrixs project and facilitates the resilience of a service.
                        The Microprofile Fault Tolerance specification contains multiple functionalities for handling common problems in a distributed service environment such as:
                    </p>

                    <ul>
                        <li><code>@Asnychronous</code> for asynchronous invocations of methods</li>
                        <li><code>@Fallback</code> for fallback results of methods which invocations fail</li>
                        <li><code>@Timeout</code> for limiting method invocation durations</li>
                        <li><code>@Retry</code> for retry behaviour of methods temporarly failing</li>
                        <li><code>@Bulkhead</code> for limiting concurrrent method invocations</li>
                        <li><code>@CircuitBreaker</code> for preventing method invocations of method frequently failing</li>
                    </ul>
                    The specification for Microprofile
                    <a href="#{mpUri.faultToleranceUri}"
                        target="_blank">
                        Fault Tolerance.
                    </a>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaultToleranceExamples" text="Examples" path="/basic/faulttolerance/index" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-jwt" title="MicroProfile JWT">
                <ui:define name="body">
                    <p>
                        <cite>
                            The MicroProfile <abbr title="JSON Web Token">JWT</abbr> specification deals with the security aspect of <abbr title="Representational State Transfer">REST</abbr>ful services.
                            Today, the most common solutions involving <abbr title="Representational State Transfer">REST</abbr>ful and microservices security are based on <abbr title="Open Authorization 2.0">OAuth 2.0</abbr>, <abbr title="OpenID Connect">OIDC</abbr> and <abbr title="JSON Web Token">JWT</abbr> standards.
                        </cite>
                    </p>
                    <p>
                        from the
                        <a href="#{mpUri.jwtUri}#_motivation"
                           target="_blank">
                            MicroProfile JWT
                        </a>
                        specification
                    </p>
                    <p>
                        All the examples in this MicroProfile training use the provided keycloak server for issuing tokens. Therefore, on opening any of the examples, you will be forwarded to keycloak and prompted with a login form. The following training users are preconfigured and used throughout the training:
                    </p>
                    <ul>
                        <li>training-user</li>
                        <li>training-admin</li>
                    </ul>
                    <p>
                        If you need to switch the user, simply click 'logout' and you will be forwarded to keycloak again.
                    </p>
                    The specification for MicroProfile <a href="#{mpUri.jwtUri}" target="_blank">JWT</a>.
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toJwtExamples" text="Examples" path="/basic/jwt/index"/>
                </ui:define>
            </tag:card>
        </section>
    </ui:define>
</ui:composition>