<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:tag="https://tags.microprofile.training.gepardec.com">

    <ui:define name="title">
        RestClient
    </ui:define>

    <ui:define name="body">
        <tag:card id="example1" title="RestClientBuilder">
            <ui:define name="body">
                <p>
                    In the first example you will learn how to call a service with the MicroProfile RestClient by manually creating the rest-client instance.
                </p>
            </ui:define>
            <ui:define name="buttons">
                <tag:button id="builder" text="Example" path="/basic/restclient/rest-client-builder" />
            </ui:define>
        </tag:card>

        <tag:card id="example2" title="RestClient-CDI">
            <ui:define name="body">
                <p>
                    The CDI approach is used more often and get's rid of boilerplate code.
                </p>
            </ui:define>
            <ui:define name="buttons">
                <tag:button id="cdi" text="Example" path="/basic/restclient/rest-client-cdi" />
            </ui:define>
        </tag:card>

        <tag:card id="example3" title="ExceptionMapper">
            <ui:define name="body">
                <p>
                    On the server side of JAX-RS we use exception mappers to map Java Exceptions to http-status codes, on the client side we need to do it visa-versa.
                </p>
                <div class="alert alert-info mt-2" role="alert">
                    Be aware, the goal from this example is to map the error response to a java Exception not to fix the error.
                </div>
            </ui:define>
            <ui:define name="buttons">
                <tag:button id="exceptionMapper" text="Example" path="/basic/restclient/exception-mapper" />
            </ui:define>
        </tag:card>

        <tag:card id="example4" title="ClientHeaders">
            <ui:define name="body">
                <p>
                    Sometimes it's necesary to enrich an outgoing client request with additional headers, for instance a Baerer-Token set in the http-header the service was called with.
                </p>
            </ui:define>
            <ui:define name="buttons">
                <tag:button id="headersFactory" text="Example" path="/basic/restclient/headers-factory" />
            </ui:define>
        </tag:card>
    </ui:define>
</ui:composition>

