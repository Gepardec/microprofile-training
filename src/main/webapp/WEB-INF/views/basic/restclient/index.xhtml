<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:tag="http://tags.microprofile.training.gepardec.com">

    <ui:define name="title">
        RestClient
    </ui:define>

    <ui:define name="body">
        <tag:card id="example1" title="RestClientBuilder">
            <ui:define name="body">
                <p>
                    In the first example you will learn how to call a service with the MicroProfile RestClient. With JAX-RS it would probably look something like this:
                    <br />
                    <code> Client client = ClientBuilder.newClient();
                        String response = client.target("http://localhost:8081/cheetahs").request().get(String.class); </code>
                    <br />
                    Try out the MicroProfile RestClient builder approach and solve the problem.
                </p>
            </ui:define>
            <ui:define name="buttons">
                <tag:button id="builder" text="Example" path="/basic/restclient/rest-client-builder" />
            </ui:define>
        </tag:card>

        <tag:card id="example2" title="CDI">
            <ui:define name="body">
                <p>
                    The CDI approach is used more often and get's rid of boilerplate code.
                </p>
            </ui:define>
            <ui:define name="buttons">
                <tag:button id="cdi" text="Example" path="/basic/restclient/cdi" />
            </ui:define>
        </tag:card>

        <tag:card id="example3" title="ExceptionMapper">
            <ui:define name="body">
                <p>
                    The <code>@RegisterProviders</code> annotation can be used to add
                    JAX-RS client providers and extensions. <b>Be aware the goal
                    from this example is to map the error response to a java Exception not to fix the error</b>.

                </p>
            </ui:define>
            <ui:define name="buttons">
                <tag:button id="exceptionMapper" text="Example" path="/basic/restclient/exception-mapper" />
            </ui:define>
        </tag:card>

        <tag:card id="example4" title="ClientHeaders">
            <ui:define name="body">
                <p>
                    The <code>@RegisterClientHeaders</code> annotation
                    is used for registering an implementation of the interface ClientHeadersFactory which allows to read
                    incoming HTTP Headers and to define additional outgoing Http Headers.

                </p>
            </ui:define>
            <ui:define name="buttons">
                <tag:button id="headersFactory" text="Example" path="/basic/restclient/headers-factory" />
            </ui:define>
        </tag:card>
    </ui:define>
</ui:composition>

