<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:tag="http://tags.microprofile.training.gepardec.com">

    <ui:define name="title">
        Basics Fault-Tolerance (CircuitBreaker)
    </ui:define>

    <ui:define name="body">
        <section>
            <div class="text-center">
                <h1>CircuitBreaker</h1>
            </div>
            <div class="mt-3">
                <p>
                    The specification for Microprofile
                    <a href="#{mpUri.faultToleranceUri}#circuitbreaker"
                        target="_blank">
                        Fault Tolerance (CircuitBreaker)
                    </a>
                </p>

                <p>
                    <code>@CircuitBreaker</code> prevents the service from being under load because of frequent failures, which could be caused by network failures,
                    or maybe a resart of a dependent service.
                    The circuit breaker mechanism has three states which the spec explains as follows.
                </p>

                <u>There are three circuit states:</u>
                <ol>
                    <li>
                        <b>Closed:</b>
                        In normal operation, the circuit breaker is closed. The circuit breaker records whether each call is a success or failure and keeps track of the most
                        recent results in a rolling window. Once the rolling window is full, if the proportion of failures in the rolling window rises above the failureRatio,
                        the circuit breaker will be opened.
                    </li>
                    <li>
                        <b>Open:</b>
                        When the circuit breaker is open, calls to the service operating under the circuit breaker will fail immediately with a CircuitBreakerOpenException.
                        After a configurable delay, the circuit breaker transitions to half-open state.
                    </li>
                    <li>
                        <b>Half-open:</b>
                        In half-open state, a configurable number of trial executions of the service are allowed. If any of them fail, the circuit breaker transitions back to open state.
                        If all the trial executions succeed, the circuit breaker transitions to the closed state.
                    </li>
                </ol>

                <hr class="my-3" />
            </div>

            <div class="row my-2">
                <div class="col">
                    <section>
                        <h4>
                            Your Task:
                        </h4>

                        <p>
                            Click the button below and you will see that the call takes up to 4 seconds to complete but it should only take 1 second.
                            Take a look at <code>com.gepardec.training.microprofile.basic.faulttolerance.AsynchronousController#async</code>
                            and follow the instructions you see there.
                        </p>

                        <div class="d-flex justify-content-center flex-row  my-2">
                            <div id="failEachCountOutline" class="form-outline me-2">
                                <input id="failEachCount" type="number" class="form-control form-control-lg" value="5" min="2" />
                                <label class="form-label" for="failEachCount">Fail Each</label>
                            </div>
                            <div id="failAfterEachCountOutline" class="form-outline me-2">
                                <input id="failAfterEachCount" type="number" class="form-control form-control-lg" value="5" min="1" />
                                <label class="form-label" for="failAfterEachCount">Fail After Each</label>
                            </div>
                            <div class="ms-2 d-flex align-items-center">
                                <tag:button id="initCallsCircuitbreakerEndpoint" path="/basic/faulttolerance/circuitbreaker/init" text="Init" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-center flex-row my-2">
                            <div class="ms-2 d-flex align-items-center">
                                <tag:button id="startCallsCircuitbreakerEndpoint" path="/basic/faulttolerance/circuitbreaker/circuitbreaked" text="Start" />
                            </div>
                            <div class="ms-2 d-flex align-items-center">
                                <tag:button id="stopCallsCircuitbreakerEndpoint" path="/basic/faulttolerance/circuitbreaker/reset" text="Stop" />
                            </div>
                        </div>

                        <hr class="my-3" />
                    </section>
                </div>
            </div>

            <div class="row my-2 text-start font-weight-bold">
                <div class="col-4 col-sm me-sm-1">
                    Server Responses:
                </div>
                <div id="serverResponse" class="col-8 col-sm ms-sm-1" style="word-wrap: break-word;">
                </div>

                <hr class="my-3" />
            </div>

            <ui:insert name="bottom">
                <tag:timerDialog id="timer" title="Waiting for response..." text="This should not take longer than 1 second" />

                <script type="module">
                    import circuitbreaker from '#{pathHelper.buildResourcePath("/js/faulttolerance/circuitbreaker.js")}'

                    circuitbreaker.init({
                        delayMillis: 500,
                        failEachCountElement: document.getElementById("failEachCountOutline"),
                        failAfterEachCountElement: document.getElementById("failAfterEachCountOutline"),
                        initElement: document.getElementById("initCallsCircuitbreakerEndpoint"),
                        callerElement: document.getElementById("startCallsCircuitbreakerEndpoint"),
                        stopElement: document.getElementById("stopCallsCircuitbreakerEndpoint"),
                        responseContainer: document.getElementById("serverResponse"),
                        failEachCountMin: 2,
                        failAfterEachCountMin: 1
                    });
                </script>
            </ui:insert>
        </section>
    </ui:define>
</ui:composition>
