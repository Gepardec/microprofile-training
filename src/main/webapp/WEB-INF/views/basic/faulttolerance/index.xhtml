<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:tag="http://tags.microprofile.training.gepardec.com">

    <ui:define name="title">
        Basics Fault-Tolerance
    </ui:define>


    <ui:define name="body">
        <section>
            <tag:card id="mp-faulttolerance-asynchronous" title="Asynchronous">
                <ui:define name="body">
                    <p>
                        Asynchronous method invocations are executed on another Thread, where the caller gets a
                        <code>Future&lt;?&gt;</code> as a result
                        so that processing can proceed while waiting for the asynchronous method invocation to finish.
                    </p>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceAsynchronous" text="Example"
                        path="/basic/faulttolerance/asynchronous" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-fallback" title="Fallback">
                <ui:define name="body">
                    <p>
                        Fallbacks are used for method invocations which fail for any reason, so that the caller always gets a fallback result instead of an error.
                    </p>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceFallback" text="Example" path="/basic/faulttolerance/fallback" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-timeout" title="Timeout">
                <ui:define name="body">
                    <p>
                        <cite>
                            Timeout prevents from the execution from waiting forever. It is recommended that a microservice invocation should have timeout associated with.
                        </cite>
                    </p>
                    from the
                    <a href="#{mpUri.faultToleranceUri}#timeout"
                        target="_blank">
                        MicroProfile Fault Tolerance (Timeout)
                    </a>
                    specification
                    <div class="alert alert-danger mt-2" role="alert">
                        <span>Timeout behaviour doesn't replace SOAP/REST client timeout settings, which comonly default to indefinite!!!</span>
                    </div>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceTimeout" text="Example" path="/basic/faulttolerance/timeout" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-retry" title="Retry">
                <ui:define name="body">
                    <p>
                        Retry behaviour ensures that brief errors such as brief network glitches don't cause an error for the caller, which is very important in
                        a distributed service environment where brief network glitches can occur.
                    </p>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceRetry" text="Example" path="/basic/faulttolerance/retry" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-bulkhead" title="Bullkhead">
                <ui:define name="body">
                    <p>
                        <cite>
                            The Bulkhead pattern is to prevent faults in one part of the system from cascading to the entire system, which might bring down the whole system.
                            The implementation is to limit the number of concurrent requests accessing an instance.
                            Therefore, Bulkhead pattern is only effective when applying
                            <code>@Bulkhead</code> to a component that can be accessed from multiple contexts.
                        </cite>
                    </p>
                    from the
                    <a href="#{mpUri.faultToleranceUri}#bulkhead"
                        target="_blank">
                        MicroProfile Fault Tolerance (Bulkhead)
                    </a>
                    specification
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceBulkhead" text="Example" path="/basic/faulttolerance/bulkhead" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-circuitbreaker" title="CircuitBreaker">
                <ui:define name="body">
                    <p>
                        <cite>
                            A Circuit Breaker prevents repeated failures, so that dysfunctional services or APIs fail fast.
                            If a service is failing frequently, the circuit breaker opens and no more calls to that service are attempted until a period of time has passed.
                        </cite>
                    </p>
                    from the
                    <a href="#{mpUri.faultToleranceUri}#circuitbreaker"
                        target="_blank">
                        MicroProfile Fault Tolerance (Circuitbreaker)
                    </a>
                    specification
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceCircuitBreaker" text="Example"
                        path="/basic/faulttolerance/circuitbreaker" />
                </ui:define>
            </tag:card>
        </section>
    </ui:define>
</ui:composition>

