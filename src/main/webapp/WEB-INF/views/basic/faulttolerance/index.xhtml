<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:tag="http://tags.microprofile.training.gepardec.com">

    <ui:define name="title">
        Microprofile Fault-Tolerance Basics
    </ui:define>

    <ui:define name="additionalNavLink">
        <tag:navLink id="toBasicIndex" path="/basic/index" text="Back"><i class="fas fa-step-backward" /></tag:navLink>
    </ui:define>

    <ui:define name="body">
        <section>
            <tag:card id="mp-faulttolerance-asynchronous" title="Asynchronous">
                <ui:define name="body">
                    <p>
                        Asynchronous invocations are used to invoke a method on another Thread, where the caller gets a <code>Future&lt;?&gt;</code> as a result.
                    </p>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceAsynchronous" text="Example" path="/basic/faulttolerance/asynchronous" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-fallback" title="Fallback">
                <ui:define name="body">
                    <p>
                        Fallback defines a fallback result for a method invocation which fails, so that the caller always gets a result and doesn't have to deal with exceptions.
                    </p>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceFallback" text="Example" path="/basic/faulttolerance/fallback" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-timeout" title="Timeout">
                <ui:define name="body">
                    <p>
                        Timeout prevents from the execution from waiting forever. It is recommended that a microservice invocation should have timeout associated with.
                    </p>
                    <div class="alert alert-danger" role="alert">
                        Timeout behaviour doesn't replace SOAP/REST client timeout settings, which comonly default to indefiniete!!!
                    </div>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceTimeout" text="Example" path="/basic/faulttolerance/timeout" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-retry" title="Retry">
                <ui:define name="body">
                    <p>
                        Retry behaviour ensures that brief errors such as brief network glitches don't cause an error for the caller, which is very important in
                        a distributed service environment where brief network glitches can occur.
                    </p>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toFaulttoleranceRetry" text="Example" path="/basic/faulttolerance/retry" />
                </ui:define>
            </tag:card>
        </section>

        <section>
            <tag:card id="mp-faulttolerance-bulkhead" title="Bullkhead">
                <ui:define name="body">
                    <p>
                        The Bulkhead pattern is to prevent faults in one part of the system from cascading to the entire system, which might bring down the whole system.
                        The implementation is to limit the number of concurrent requests accessing an instance.
                        Therefore, Bulkhead pattern is only effective when applying <code>@Bulkhead</code> to a component that can be accessed from multiple contexts.
                    </p>
                </ui:define>
                <ui:define name="buttons">
                    <tag:button id="toBulkheadRetry" text="Example" path="/basic/faulttolerance/bulkhead" />
                </ui:define>
            </tag:card>
        </section>
    </ui:define>
</ui:composition>

