<ui:composition template="/WEB-INF/layout/layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:tag="http://tags.microprofile.training.gepardec.com">

    <ui:define name="headerText">
        Microprofile-Metrics Basics @Timed
    </ui:define>

    <ui:define name="additionalNavLink">
        <tag:navLink id="toBasicMetricsIndex" path="/basic/metrics/index" text="Back"><i class="fas fa-step-backward"/></tag:navLink>
    </ui:define>

    <ui:define name="body">

        <div class="container-lg">
            <div class="row m-2">
                <div class="col">
                    <section>
                        <p>
                            The specification for Microprofile
                            <a href="https://download.eclipse.org/microprofile/microprofile-metrics-3.0/microprofile-metrics-spec-3.0.html#_timed"
                               target="_blank">
                                Metrics (Timed).
                            </a>
                        </p>

                        <p>
                            <code>@Timed</code> is an annotation for marking a constructor or method of an annotated object as timed. The metric of
                            type Timer tracks how frequently the annotated object is invoked, and tracks how long it took the
                            invocations to complete. The data is aggregated to calculate duration statistics and throughput
                            statistics.
                        </p>

                        <hr class="mt-3 mb-3"/>

                        <tag:button id="callTimeEndpoint" text="Start" path="/basic/metrics/time"/>
                        <tag:button id="stopCallingTimeEndpoint" text="Stop" />

                        <div class="row my-1">
                            <div class="col-sm text-lg-start text-sm-right mr-sm-1">
                                Elapsed time (in seconds):
                            </div>
                            <div class="col-sm text-center text-sm-left ml-sm-1">
                                <h:outputText id="serverResponse" value="${time}" style="padding-left: 30pt"/>
                            </div>
                        </div>
                        <hr class="mt-3 mb-3"/>
                    </section>
                </div>
            </div>

            <div class="row m-2">
                <div class="col">
                    <section>
                        <h5>
                            Your Task:
                        </h5>

                        <p>
                            Use <code>@Timed</code> for marking a <code>time()</code> methode in
                            <code>com.gepardec.training.microprofile.basic.metrics.ExampleController</code>.
                            Each time a method is invoked, the execution will be timed with the respective timer.
                            The name of the metric should be <code>"timed-example"</code>.
                            Make sure that the metric is displayed at
                            <a href="http://localhost:9990/metrics"
                               target="_blank">
                                Wildfly
                            </a>
                            and
                            <a href="http://localhost:19090/"
                               target="_blank">
                                Prometheus.
                            </a>

                        </p>

                    </section>
                </div>
            </div>
        </div>
    </ui:define>
    <ui:define name="bottom">
        <tag:timerDialog id="timer" title="Waiting for response..." text="This should not take longer than 1 second" />

        <script type="module">
            import mp from '#{pathHelper.buildResourcePath("/js/mp.js")}'
            import metered from '#{pathHelper.buildResourcePath("/js/basic/metrics/metered.js")}'

            mp.registerOnLoad(() => {
                metered.init({
                    delayMillis: 1000,
                    callerElement: document.getElementById("callTimeEndpoint"),
                    stopElement: document.getElementById("stopCallingTimeEndpoint"),
                    responseElement: document.getElementById("serverResponse"),
                });
            });
        </script>
    </ui:define>
</ui:composition>



